import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useAppSelector } from '../store/hooks';
import { useUpdateUser } from './useUpdateUser';
import { toast } from 'sonner';
import moment from 'moment';

export interface FormData {
  email: string;
  fullName: string;
  phoneNumber: string;
  address: string;
  dateOfBirth: string;
}

export interface FormErrors {
  email?: string;
  fullName?: string;
  phoneNumber?: string;
  address?: string;
  dateOfBirth?: string;
}

export const useProfileForm = () => {
  const { t } = useTranslation(['user', 'common']);
  const { user } = useAppSelector((state) => state.auth);
  const { updateUserData, loading: isUpdating } = useUpdateUser();

  const [formData, setFormData] = useState<FormData>({
    email: "",
    fullName: "",
    phoneNumber: "",
    address: "",
    dateOfBirth: "",
  });
  
  const [formErrors, setFormErrors] = useState<FormErrors>({});
  const [isSaving, setIsSaving] = useState(false);

  // Initialize form v·ªõi d·ªØ li·ªáu user khi user ƒë∆∞·ª£c load
  useEffect(() => {
    if (user) {
      setFormData({
        email: user.email || "",
        fullName: user.fullName || "",
        phoneNumber: user.phoneNumber || "",
        address: user.address || "",
        dateOfBirth: user.dateOfBirth ? moment(user.dateOfBirth).format('DD/MM/YYYY') : "",
      });
      console.log('üìù Form ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi d·ªØ li·ªáu user:', {
        fullName: user.fullName,
        email: user.email,
        dateOfBirth: user.dateOfBirth ? moment(user.dateOfBirth).format('DD/MM/YYYY') : 'Ch∆∞a c√≥'
      });
    }
  }, [user]);

  // Form validation
  const validateForm = (): boolean => {
    const errors: FormErrors = {};
    
    // Email validation
    if (!formData.email.trim()) {
      errors.email = t('common:validation.required');
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      errors.email = t('common:validation.invalidEmail');
    }

    // Phone validation
    if (formData.phoneNumber && !/^[0-9+\-\s()]+$/.test(formData.phoneNumber)) {
      errors.phoneNumber = t('common:validation.invalidPhone');
    }

    // Full name validation
    if (!formData.fullName.trim()) {
      errors.fullName = t('common:validation.required');
    }

    // Date validation
    if (formData.dateOfBirth && !moment(formData.dateOfBirth, 'DD/MM/YYYY', true).isValid()) {
      errors.dateOfBirth = 'ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá (DD/MM/YYYY)';
    }

    setFormErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // Auto format date input DD/MM/YYYY
  const formatDateInput = (value: string): string => {
    // Ch·ªâ gi·ªØ l·∫°i s·ªë
    const numbersOnly = value.replace(/\D/g, '');

    // Th√™m d·∫•u "/" t·ª± ƒë·ªông
    if (numbersOnly.length <= 2) {
      return numbersOnly;
    } else if (numbersOnly.length <= 4) {
      return `${numbersOnly.slice(0, 2)}/${numbersOnly.slice(2)}`;
    } else {
      return `${numbersOnly.slice(0, 2)}/${numbersOnly.slice(2, 4)}/${numbersOnly.slice(4, 8)}`;
    }
  };

  // Handle input change
  const handleInputChange = (field: keyof FormData, value: string) => {
    let processedValue = value;

    // Auto format cho field dateOfBirth
    if (field === 'dateOfBirth') {
      processedValue = formatDateInput(value);
    }

    setFormData(prev => ({ ...prev, [field]: processedValue }));

    // Clear error khi user b·∫Øt ƒë·∫ßu nh·∫≠p
    if (formErrors[field]) {
      setFormErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  // Handle form submission
  const handleSaveChanges = async () => {
    console.log('üöÄ B·∫Øt ƒë·∫ßu l∆∞u th√¥ng tin user...');
    
    if (!validateForm()) {
      toast.error('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p');
      return;
    }

    setIsSaving(true);
    try {
      if (!user?.id) {
        throw new Error('Kh√¥ng t√¨m th·∫•y ID ng∆∞·ªùi d√πng');
      }

      console.log('üìù D·ªØ li·ªáu chu·∫©n b·ªã c·∫≠p nh·∫≠t:', formData);

      // Chuy·ªÉn ƒë·ªïi ng√†y t·ª´ DD/MM/YYYY sang ISO format ƒë·ªÉ g·ª≠i API
      const dateOfBirthISO = formData.dateOfBirth
        ? moment(formData.dateOfBirth, 'DD/MM/YYYY').toISOString()
        : undefined;

      const updateUserInput = {
        id: user.id,
        email: formData.email,
        fullName: formData.fullName,
        phoneNumber: formData.phoneNumber,
        address: formData.address,
        dateOfBirth: dateOfBirthISO
      };

      console.log('üìÖ Ng√†y sinh ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi:', {
        input: formData.dateOfBirth,
        output: dateOfBirthISO
      });

      const result = await updateUserData(updateUserInput);

      if (result.success) {
        console.log('‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!');
        toast.success('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!', {
          description: 'Th√¥ng tin c√° nh√¢n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u.'
        });
      } else {
        console.error('‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i:', result.error);
        const errorMessage = typeof result.error === 'string' 
          ? result.error 
          : result.error?.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin';
        toast.error('C·∫≠p nh·∫≠t th·∫•t b·∫°i', {
          description: errorMessage
        });
      }
    } catch (error) {
      console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
      const errorMessage = error instanceof Error 
        ? error.message 
        : 'C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin';
      toast.error('C√≥ l·ªói x·∫£y ra', {
        description: errorMessage
      });
    } finally {
      setIsSaving(false);
      console.log('üèÅ K·∫øt th√∫c qu√° tr√¨nh l∆∞u');
    }
  };

  return {
    formData,
    formErrors,
    isSaving: isSaving || isUpdating,
    handleInputChange,
    handleSaveChanges,
    user
  };
};
